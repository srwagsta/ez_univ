# Generated by Django 2.0.2 on 2018-04-02 20:54
from django.db import migrations, models
import re


CALENDAR_PERIODS = [
    {
        "calendar_period_id": 9999,
        "calendar_period_name": "TemporaryValue",
    },
]


def extract_year(semester_name):
    answer = re.findall(r'^\d{4} ', semester_name)
    if len(answer) != 1:
        raise ValueError('Error found in year portion of semester name:', semester_name)
    return answer[0]


def extract_calendar_period_name(semester_name):
    answer = re.findall(r' (Spring|Summer|Fall)$', semester_name)
    if len(answer) != 1:
        raise ValueError('Error found in calendar_period portion of semester name:', semester_name)
    return answer[0]


def forward_convert_semester_data(apps, schema_editor):
    CalendarPeriod = apps.get_model('courseinfo', 'CalendarPeriod')
    Semester = apps.get_model('courseinfo', 'Semester')

    semesters = Semester.objects.all()
    for semester in semesters:
        semester.year = extract_year(semester.semester_name)
        this_calendar_period_name = extract_calendar_period_name(semester.semester_name)
        calendar_period_object = CalendarPeriod.objects.get(
            calendar_period_name=this_calendar_period_name
        )
        semester.calendar_period = calendar_period_object
        semester.save()


def reverse_convert_semester_data(apps, schema_editor):
    CalendarPeriod = apps.get_model('courseinfo', 'CalendarPeriod')
    Semester = apps.get_model('courseinfo', 'Semester')

    semesters = Semester.objects.all()
    for semester in semesters:
        semester.semester_name = str(semester.year) + ' - ' + semester.calendar_period.calendar_period_name
        semester.year = 0
        calendar_period_object = CalendarPeriod.objects.get(
            calendar_period_id=9999
        )
        semester.calendar_period = calendar_period_object
        semester.save()


def remove_temporary_calendar_period_data(apps, schema_editor):
    CalendarPeriod = apps.get_model('courseinfo', 'CalendarPeriod')
    for calendar_period in CALENDAR_PERIODS:
        calendar_period_object = CalendarPeriod.objects.get(
            calendar_period_id=calendar_period['calendar_period_id']
        )
        calendar_period_object.delete()


def add_temporary_calendar_period_data(apps, schema_editor):
    CalendarPeriod = apps.get_model('courseinfo', 'CalendarPeriod')
    for calendar_period in CALENDAR_PERIODS:
        calendar_period_object = CalendarPeriod.objects.create(
            calendar_period_id=calendar_period['calendar_period_id'],
            calendar_period_name=calendar_period['calendar_period_name']
        )


class Migration(migrations.Migration):
    dependencies = [
        ('courseinfo', '0006_calenderperiod'),
    ]

    operations = [

        migrations.AlterField(
            model_name='semester',
            name='semester_name',
            field=models.CharField(max_length=45, unique=False, default='temporary value'),
        ),

        migrations.AddField(
            model_name='semester',
            name='year',
            field=models.IntegerField(default=0)
        ),

        migrations.AddField(
            model_name='semester',
            name='calendar_period',
            field=models.ForeignKey(to='courseinfo.calendarperiod', default=9999, on_delete=models.CASCADE)
        ),

        migrations.RunPython(
            forward_convert_semester_data,
            reverse_convert_semester_data
        ),

        migrations.RunPython(
            remove_temporary_calendar_period_data,
            add_temporary_calendar_period_data
        ),

        migrations.RemoveField(
            model_name='semester',
            name='semester_name'
        ),

        migrations.AlterField(
            model_name='semester',
            name='year',
            field=models.IntegerField()
        ),

        migrations.AlterField(
            model_name='semester',
            name='calendar_period',
            field=models.ForeignKey(to='courseinfo.calendarperiod', on_delete=models.CASCADE)
        ),

        migrations.AlterUniqueTogether(
            name="semester",
            unique_together=set([('year', 'calendar_period')]),
        ),


    ]

